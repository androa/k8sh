#!/usr/bin/env python

import cmd
import subprocess
import os
import yaml
import readline
import traceback
import atexit
import logging

logging.basicConfig(filename='k8sh_debug.log',level=logging.DEBUG)

class KubectlLine():

    def __init__(self,line,is_completer=False):
        self._line_list = line.split()
        self.is_completer = is_completer
       
    @property
    def object(self):
        try:    
            if self.is_completer:
                return self._line_list[1].strip()
            else:
                return self._line_list[0].strip()
        except IndexError,e :
            pass
        
        return None

    @property
    def command(self):
        try:    
            if self.is_completer:
                return self._line_list[0].strip()
        except IndexError,e :
            pass

        return None

    @property
    def value(self):
        try:    
            if self.is_completer:
                return self._line_list[2].strip()
            else:
                return self._line_list[1].strip()
        except IndexError,e :
            pass
        
        return None



class KubectlShell(cmd.Cmd, object):
    """ Interactive shell for Kubectl """

    readline.set_completer_delims(' ') # allow auto complete objects that have - and / in them

    base_prompt = 'kubectl'
    parsed_line = None
    _kubeconfig = None
    
    _clusters = []
    
    _contexts = []
    _current_context = None
        
    _namespaces = []
    _current_namespace = None

    _pods = []

    _settables = ['context', 'namespace']

    _kubernetes_objects = [
        'certificatesigningrequest',  
        'event',
        'pod',
        'service',
        'cluster',
        'horizontalpodautoscaler',
        'poddisruptionbudget',
        'serviceaccount',
        'clusterrole',
        'ingress',
        'podsecuritypolicy',
        'statefulset',
        'clusterrolebinding',
        'job',
        'podtemplate',
        'status',
        'componentstatus',
        'limitrange',
        'replicaset',
        'storageclass',
        'configmap',
        'namespace',
        'replicationcontroller',
        'thirdpartyresource',
        'cronjob',
        'networkpolicy',
        'resourcequota',
        'thirdpartyresourcedata',
        'daemonset',
        'node',
        'role',
        'deployment',
        'persistentvolume',
        'rolebinding',
        'endpoints',
        'persistentvolumeclaim',
        'secret'
        ]

    _kubectl_methods = [
        'annotate',
        'autoscale',
        'convert',
        'describe',
        'expose',
        'patch',
        'rollout'
        'top',
        'api-versions',
        'certificate',
        'cordon',
        'drain',
        'get',
        'port-forward',
        'run',
        'uncordon',
        'apply',
        'cluster-info',
        'cp',
        'edit',
        'label',
        'proxy',
        'scale',
        'version',
        'attach',
        'completion',
        'create',
        'exec',
        'logs',
        'replace',
        'set',
        'auth',
        'config',
        'delete',
        'explain',
        'options',
        'rolling-update',
        'taint'
        ]


    def cmdloop(self, intro=None):
        print "Welcome to k8sh."
        while True:
            try:
                super(KubectlShell, self).cmdloop(intro="")
                self.postloop()
                break
            except KeyboardInterrupt:
                print ""
                pass
    
    def preloop(self):
        self._contexts = []
        self._all_commands = self._k8sh_methods + self._kubectl_methods
        with open(self.kubeconfig) as kubeconfig:
            self.k_data = yaml.safe_load(kubeconfig)

    def precmd(self, line):
        print ''
        return line

    def completenames(self, text, *ignored):
        return [com for com in self._all_commands if com.startswith(text)]

    def default(self,line):
        print self.run_command(*line.split())

    def completedefault(self, text, line, begidx, endidx):
        return [i for i in self._kubectl_methods if i.startswith(text)]

    def do_get(self,line):
        """ 
        Usage: get <kube_object_type> [<object>].
        Example: get pods
        Gets a list of the objects matching that type. 
        If an objet name or list of object names are provided, it returns only those objects 
        """
        print self.run_command('get', *line.split())
        
    def complete_get(self, text, line, begidx, endidx):         
        return self._complete_command(text, line, begidx, endidx)
   
    def do_describe(self,line):
        """ 
        Usage: describe <kube_object_type> [<object>].
        Example: descrive deployments
        Describes a list of the objects matching that type. 
        If an objet name or list of object names are provided, it describes only those objects 
        """
        print self.run_command('describe', *line.split())
        
    def complete_describe(self, text, line, begidx, endidx):
        return self._complete_command(text, line, begidx, endidx)
            
    def do_create(self,line):
        print self.run_command('create', *line.split())

    def do_logs(self,line):
        print self.run_command('log', *line.split())

    def complete_logs(self, text, line, begidx, endidx):
        return self._complete_get_object('pod', text, line, begidx, endidx)

    def do_log(self,line):
        print self.logs(line)

    def complete_logs(self, text, line, begidx, endidx):
        return self.complete_logs(text, line, begidx, endidx)

    def _complete_get_object(self, obj, text, line, begidx, endidx):
        return [i for i in self._get_objects(obj) if i.startswith(text)]

    def _complete_command(self, text, line, begidx, endidx):
        parsed_line = self.parse_line(line)
        try:
            if (not text or parsed_line.object) and (parsed_line.object in self._kubernetes_objects or parsed_line.object.rstrip('s') in self._kubernetes_objects):
                return self._complete_get_object(parsed_line.object, text, line, begidx, endidx)
            else:
                return [i for i in self._kubernetes_objects if i.startswith(text)]
        except Exception, e:
            logging.debug(e)
            logging.debug(traceback.format_exc)

    def do_unset(self, line):
        if line in self._settables:
            settable = getattr(self,'do_set_{}'.format(line))
            settable("")
            print("Setting {} back to kube_config default".format(line))
        else:
            print("\"{}\" is not one of the settable attributes.".format(line))

    def complete_unset(self, text, line, begidx, endidx):
        return [i for i in self._settables if i.startswith(text)]
    
    # def do_set(self, line):
    #     parsed_line = self.parse_line(line)
    #     if parsed_line.object in self._settables:
    #         settable = getattr(self,'do_set_{}'.format(parsed_line.object))
    #         settable(parsed_line.value)

    # def complete_set(self, text, line, begidx, endidx):
    #     parsed_line = self.parse_line(line)
    #     logging.debug('Text: "{}" Line: "{}" '.format(text, line) )
    #     if parsed_line.object in self._settables:
    #         completer = getattr(self,'complete_set_{}'.format(parsed_line.object))
    #         return completer(text, parsed_line.value, begidx, endidx)

        return [i for i in self._settables if i.startswith(text)]

    def do_set_namespace(self, line):	
        self._current_namespace=line
    	print(self._current_namespace)

    def complete_set_namespace(self, text, line, begidx, endidx):
        return [i for i in self.namespaces if i.startswith(text)]

    def do_set_context(self, line):   
        self._current_context=line
        #print(self._current_context)
        self._namespaces = []

    def complete_set_context(self, text, line, begidx, endidx):
        return [i for i in self.contexts if i.startswith(text)]

    def run_command(self, *args):
        try:
            _command = self.base_command
            _command.extend(args)
            out = subprocess.check_output(filter(None,_command))
            return out
        except Exception, e:
            print e
            #print traceback.format_exc()
            return ''
    
    def _get_objects(self,obj):
        _objs = []
        out = self.run_command('get',obj)
        for o in out.split('\n')[1:-1]:
            _objs.append(o.split(" ")[0])
        return _objs

    def do_exit(self,line):
        return self.do_EOF()

    def do_EOF(self, line=None):
        print "Good Bye"
        return True

    def parse_line(self,line):
        thing_the_first = False
        try:
            thing_the_first = line.split()[0]
        except IndexError:
            pass

        is_completer = False
        if thing_the_first in self._all_commands:
            is_completer = True
        
        self.parsed_line = KubectlLine(line, is_completer)       
        return self.parsed_line

    @property
    def pods(self):
        out = self.run_command('get','pod')
        for pod in out.split('\n')[1:-1]:
            self._pods.append(pod.split(" ")[0])
        return self._pods

    @property
    def contexts(self):
        if not self._contexts:
            for context in self.k_data['contexts']:
                self._contexts.append(context['name'])
        return self._contexts

    @property    
    def clusters(self):
        if not self._clusters:
            for cluster in self.k_data['clusters']:
                self._clusters.append(cluster['name'])
        return self._clusters
    
    @property
    def namespaces(self):
        if not self._namespaces:
            out = self.run_command('get','namespaces')
            
            for ns in out.split('\n')[1:-1]:
                self._namespaces.append(ns.split(" ")[0])
        return self._namespaces

    @property
    def current_context(self):
        if not self._current_context:
            self._current_context = self.k_data['current-context']
        return self._current_context

    @property
    def prompt(self):
        return "{} >".format(' '.join(self.base_command))

    @property
    def kubeconfig(self):
        if not self._kubeconfig:
            if os.environ.get('KUBECONFIG',False):
                self._kubeconfig = os.environ.get('KUBECONFIG')
            elif os.path.isfile(os.path.expanduser('~/.kube/config')):
                self._kubeconfig = os.path.expanduser('~/.kube/config')

        return self._kubeconfig

    @property
    def _k8sh_methods(self):
        return [a[3:] for a in self.get_names() if a.startswith('do')]
    
    @property
    def base_command(self):
    	command = ['kubectl']
        command += ['--context={}'.format(self.current_context)]

    	if self._current_namespace:
    		command += ['--namespace={}'.format(self._current_namespace)]

        return command


if __name__ == '__main__':
    KubectlShell().cmdloop()